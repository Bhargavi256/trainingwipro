Fibonacci number
int nthFibonacci(int n){
if(n==0)
   return 0;
else if(n==1||n==2)
   return 1;

return nthFibonacci(n-1)+nthFibonacci(n-2);
}


Pseudocode:

1.start
2.Take input of n to find nth fibonacci
3. call function nth fibonacci
3. take the result
4. print result
5. end

function fibonacci:
1. if n equalsto 0, return 0
2. if n is 1 or 2, return 1
3. call n-1 sum n-2 recursive fibonacci function
4. return result

To calculate fib(n) is equal to the sum of time taken to calculate fib(n-1) and fib(n-2). This also includes the constant time to perform the previous addition. On solving the above recursive equation we get the upper bound of Fibonacci as O(2n) but this is not the tight upper bound. The fact that Fibonacci can be mathematically represented as a linear recursive function can be used to find the tight upper bound. Now Fibonacci is defined as F(n) = F(n-1) + F(n-2)


Using iteration:

 int fib(int n)
    {
        int a = 0, b = 1, c;
        if (n == 0)
            return a;
        for (int i = 2; i <= n; i++) {
            c = a + b;
            a = b;
            b = c;
        }
        return b;
    }
 